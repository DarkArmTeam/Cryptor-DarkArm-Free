#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Main Window - –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∫—Ä–∏–ø—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import customtkinter as ctk
import threading
import json
import os
from pathlib import Path
from typing import Dict, Any
import time
from datetime import datetime

class MainWindow:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∫—Ä–∏–ø—Ç–æ—Ä–∞"""
    
    def __init__(self, root: ctk.CTk, file_analyzer, cryptor_engine, binder_engine=None):
        self.root = root
        self.file_analyzer = file_analyzer
        self.cryptor_engine = cryptor_engine
        
        # BinderEngine (—Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)
        if binder_engine:
            self.binder_engine = binder_engine
        else:
            from ..core.binder_engine import BinderEngine
            self.binder_engine = BinderEngine()
        
        self.current_file = None
        self.analysis_result = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        self.setup_styles()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.title("üîê Cryptornor 2025 - Advanced PE Cryptor & Binder")
        self.root.geometry("1500x1000")  # –£–≤–µ–ª–∏—á–µ–Ω–æ –æ–∫–Ω–æ
        self.root.minsize(1300, 900)     # –£–≤–µ–ª–∏—á–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        self.main_container = ctk.CTkFrame(self.root)
        self.main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.main_container.grid_rowconfigure(2, weight=1)
        self.main_container.grid_columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_header()
        self.create_file_panel()
        self.create_analysis_panel()
        self.create_cryptor_panel()
        self.create_log_panel()
        self.create_status_bar()
        self.setup_styles()
        
    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = ctk.CTkFrame(self.main_container)
        header_frame.pack(fill="x", padx=5, pady=5)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            header_frame,
            text="üîê Cryptornor 2025 - Advanced PE Cryptor",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(side="left", padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ Binder
        binder_button = ctk.CTkButton(
            header_frame,
            text="üìé Binder",
            command=self.show_binder_info,
            width=150,
            height=30
        )
        binder_button.pack(side="right", padx=10, pady=10)
        
    def create_file_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
        file_frame = ctk.CTkFrame(self.main_container)
        file_frame.pack(fill="x", padx=5, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        file_title = ctk.CTkLabel(
            file_frame,
            text="üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        file_title.pack(anchor="w", padx=10, pady=(10, 5))
        
        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_select_frame = ctk.CTkFrame(file_frame)
        file_select_frame.pack(fill="x", padx=10, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        file_select_frame.grid_columnconfigure(0, weight=1)
        file_select_frame.grid_columnconfigure(1, weight=0)
        
        # –ü–æ–ª–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        self.file_path_var = tk.StringVar()
        self.file_path_entry = ctk.CTkEntry(
            file_select_frame,
            textvariable=self.file_path_var,
            placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ .exe –∏–ª–∏ .dll —Ñ–∞–π–ª –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è...",
            height=35
        )
        self.file_path_entry.grid(row=0, column=0, sticky="ew", padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        self.browse_button = ctk.CTkButton(
            file_select_frame,
            text="–û–±–∑–æ—Ä",
            command=self.browse_file,
            width=100,
            height=35
        )
        self.browse_button.grid(row=0, column=1, sticky="e")
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.analyze_button = ctk.CTkButton(
            file_frame,
            text="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª",
            command=self.analyze_file,
            height=35,
            fg_color="#FF6B35",
            hover_color="#E55A2B"
        )
        self.analyze_button.pack(pady=10)
        
    def create_analysis_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        analysis_frame = ctk.CTkFrame(self.main_container)
        analysis_frame.pack(fill="x", padx=5, pady=5)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ fill="x" —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–æ—Å—å
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        analysis_title = ctk.CTkLabel(
            analysis_frame,
            text="üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        analysis_title.pack(anchor="w", padx=10, pady=(10, 5))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
        self.analysis_notebook = ttk.Notebook(analysis_frame, height=300)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
        self.analysis_notebook.pack(fill="x", padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.create_general_info_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ PE –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.create_pe_info_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.create_dependencies_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å–µ–∫—Ü–∏–π
        self.create_sections_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.create_security_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ Binder
        self.create_binder_tab()
        
    def create_general_info_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        general_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(general_frame, text="–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        general_frame.grid_rowconfigure(0, weight=1)
        general_frame.grid_columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.general_text = scrolledtext.ScrolledText(
            general_frame,
            wrap=tk.WORD,
            font=("Consolas", 10),
            bg="#2B2B2B",
            fg="#FFFFFF",
            insertbackground="#FFFFFF"
        )
        self.general_text.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
    def create_pe_info_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ PE –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        pe_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(pe_frame, text="PE –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        pe_frame.grid_rowconfigure(0, weight=1)
        pe_frame.grid_columnconfigure(0, weight=1)
        
        self.pe_text = scrolledtext.ScrolledText(
            pe_frame,
            wrap=tk.WORD,
            font=("Consolas", 10),
            bg="#2B2B2B",
            fg="#FFFFFF",
            insertbackground="#FFFFFF"
        )
        self.pe_text.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
    def create_dependencies_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        deps_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(deps_frame, text="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        deps_frame.grid_rowconfigure(0, weight=1)
        deps_frame.grid_columnconfigure(0, weight=1)
        
        self.deps_text = scrolledtext.ScrolledText(
            deps_frame,
            wrap=tk.WORD,
            font=("Consolas", 10),
            bg="#2B2B2B",
            fg="#FFFFFF",
            insertbackground="#FFFFFF"
        )
        self.deps_text.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
    def create_sections_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å–µ–∫—Ü–∏–π"""
        sections_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(sections_frame, text="–°–µ–∫—Ü–∏–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sections_frame.grid_rowconfigure(0, weight=1)
        sections_frame.grid_columnconfigure(0, weight=1)
        
        self.sections_text = scrolledtext.ScrolledText(
            sections_frame,
            wrap=tk.WORD,
            font=("Consolas", 10),
            bg="#2B2B2B",
            fg="#FFFFFF",
            insertbackground="#FFFFFF"
        )
        self.sections_text.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
    def create_security_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(security_frame, text="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        security_frame.grid_rowconfigure(0, weight=1)
        security_frame.grid_columnconfigure(0, weight=1)
        
        self.security_text = scrolledtext.ScrolledText(
            security_frame,
            wrap=tk.WORD,
            font=("Consolas", 10),
            bg="#2B2B2B",
            fg="#FFFFFF",
            insertbackground="#FFFFFF"
        )
        self.security_text.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
    def create_binder_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ Binder"""
        binder_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(binder_frame, text="üìé Binder")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        binder_frame.grid_rowconfigure(1, weight=1)
        binder_frame.grid_columnconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ Binder
        binder_title = ctk.CTkLabel(
            binder_frame,
            text="üìé File Binder - –°–∫–ª–µ–π–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        binder_title.grid(row=0, column=0, sticky="w", padx=10, pady=(10, 5))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Binder
        binder_container = ctk.CTkFrame(binder_frame)
        binder_container.grid(row=1, column=0, sticky="nsew", padx=10, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        binder_container.grid_columnconfigure(0, weight=1)
        binder_container.grid_columnconfigure(1, weight=1)
        binder_container.grid_rowconfigure(1, weight=1)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        self.create_binder_files_panel(binder_container)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–∫–æ–Ω–∫–∞
        self.create_binder_settings_panel(binder_container)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏
        self.create_binder_list_panel(binder_container)
    
    def create_binder_files_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        files_frame = ctk.CTkFrame(parent)
        files_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 5), pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        files_title = ctk.CTkLabel(
            files_frame,
            text="üìÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        files_title.pack(anchor="w", padx=10, pady=(10, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        add_file_btn = ctk.CTkButton(
            files_frame,
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
            command=self.add_file_to_binder,
            width=150,
            height=35
        )
        add_file_btn.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏
        add_folder_btn = ctk.CTkButton(
            files_frame,
            text="üìÅ –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É",
            command=self.add_folder_to_binder,
            width=150,
            height=35
        )
        add_folder_btn.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = ctk.CTkButton(
            files_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            command=self.clear_binder_files,
            width=150,
            height=35,
            fg_color="#FF4444",
            hover_color="#CC3333"
        )
        clear_btn.pack(pady=5)
    
    def create_binder_settings_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Binder"""
        settings_frame = ctk.CTkFrame(parent)
        settings_frame.grid(row=0, column=1, sticky="nsew", padx=(5, 0), pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        settings_title = ctk.CTkLabel(
            settings_frame,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        settings_title.pack(anchor="w", padx=10, pady=(10, 5))
        
        # –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        exec_label = ctk.CTkLabel(settings_frame, text="–†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        exec_label.pack(anchor="w", padx=10, pady=2)
        
        self.execution_mode_var = tk.StringVar(value="parallel")
        exec_combo = ctk.CTkOptionMenu(
            settings_frame,
            variable=self.execution_mode_var,
            values=["parallel", "sequential"],
            width=150
        )
        exec_combo.pack(pady=2)
        
        # –ò–∫–æ–Ω–∫–∞
        icon_label = ctk.CTkLabel(settings_frame, text="–ò–∫–æ–Ω–∫–∞:")
        icon_label.pack(anchor="w", padx=10, pady=(10, 2))
        
        icon_frame = ctk.CTkFrame(settings_frame)
        icon_frame.pack(fill="x", padx=10, pady=2)
        
        self.icon_path_var = tk.StringVar()
        icon_entry = ctk.CTkEntry(
            icon_frame,
            textvariable=self.icon_path_var,
            placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ .ico —Ñ–∞–π–ª...",
            height=30
        )
        icon_entry.pack(side="left", fill="x", expand=True, padx=(0, 5))
        
        icon_btn = ctk.CTkButton(
            icon_frame,
            text="üìÅ",
            command=self.browse_icon,
            width=40,
            height=30
        )
        icon_btn.pack(side="right")
        
        # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_label = ctk.CTkLabel(settings_frame, text="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
        output_label.pack(anchor="w", padx=10, pady=(10, 2))
        
        self.output_name_var = tk.StringVar(value="binded_file.exe")
        output_entry = ctk.CTkEntry(
            settings_frame,
            textvariable=self.output_name_var,
            height=30
        )
        output_entry.pack(fill="x", padx=10, pady=2)
    
    def create_binder_list_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        list_frame = ctk.CTkFrame(parent)
        list_frame.grid(row=1, column=0, columnspan=2, sticky="nsew", pady=(5, 0))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        list_title = ctk.CTkLabel(
            list_frame,
            text="üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–ª–µ–π–∫–∏",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        list_title.pack(anchor="w", padx=10, pady=(10, 5))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        columns = ("–ò–º—è", "–ü—É—Ç—å", "–†–∞–∑–º–µ—Ä", "–ü–æ—Ä—è–¥–æ–∫", "–°–∫—Ä—ã—Ç—ã–π")
        self.files_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.files_tree.heading("–ò–º—è", text="–ò–º—è —Ñ–∞–π–ª–∞")
        self.files_tree.heading("–ü—É—Ç—å", text="–ü—É—Ç—å")
        self.files_tree.heading("–†–∞–∑–º–µ—Ä", text="–†–∞–∑–º–µ—Ä")
        self.files_tree.heading("–ü–æ—Ä—è–¥–æ–∫", text="–ü–æ—Ä—è–¥–æ–∫")
        self.files_tree.heading("–°–∫—Ä—ã—Ç—ã–π", text="–°–∫—Ä—ã—Ç—ã–π")
        
        self.files_tree.column("–ò–º—è", width=150)
        self.files_tree.column("–ü—É—Ç—å", width=300)
        self.files_tree.column("–†–∞–∑–º–µ—Ä", width=100)
        self.files_tree.column("–ü–æ—Ä—è–¥–æ–∫", width=80)
        self.files_tree.column("–°–∫—Ä—ã—Ç—ã–π", width=80)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        tree_scroll_y = ttk.Scrollbar(list_frame, orient="vertical", command=self.files_tree.yview)
        tree_scroll_x = ttk.Scrollbar(list_frame, orient="horizontal", command=self.files_tree.xview)
        self.files_tree.configure(yscrollcommand=tree_scroll_y.set, xscrollcommand=tree_scroll_x.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.files_tree.pack(side="left", fill="both", expand=True, padx=(10, 0), pady=5)
        tree_scroll_y.pack(side="right", fill="y", pady=5)
        tree_scroll_x.pack(side="bottom", fill="x", padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(list_frame)
        buttons_frame.pack(fill="x", padx=10, pady=5)
        
        remove_btn = ctk.CTkButton(
            buttons_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π",
            command=self.remove_selected_file,
            width=150,
            height=35
        )
        remove_btn.pack(side="left", padx=5)
        
        self.bind_files_btn = ctk.CTkButton(
            buttons_frame,
            text="üîó –°–∫–ª–µ–∏—Ç—å —Ñ–∞–π–ª—ã",
            command=self.bind_files,
            width=150,
            height=35,
            fg_color="#00FF00",
            hover_color="#00CC00"
        )
        self.bind_files_btn.pack(side="right", padx=5)
    
    def add_file_to_binder(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ Binder"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
            filetypes=[("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if file_path:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = Path(file_path)
            if file_info.exists():
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ BinderEngine
                success = self.binder_engine.add_file(file_path)
                if success:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ Treeview
                    size = self._format_size(file_info.stat().st_size)
                    self.files_tree.insert("", "end", values=(
                        file_info.name,
                        str(file_info),
                        size,
                        0,  # –ø–æ—Ä—è–¥–æ–∫
                        "–ù–µ—Ç"  # —Å–∫—Ä—ã—Ç—ã–π
                    ))
                    self.log_message(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_info.name}")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {file_info.name}")
    
    def add_folder_to_binder(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É –≤ Binder"""
        folder_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        
        if folder_path:
            folder = Path(folder_path)
            added_count = 0
            
            for file_path in folder.rglob("*"):
                if file_path.is_file():
                    success = self.binder_engine.add_file(str(file_path))
                    if success:
                        size = self._format_size(file_path.stat().st_size)
                        self.files_tree.insert("", "end", values=(
                            file_path.name,
                            str(file_path),
                            size,
                            0,
                            "–ù–µ—Ç"
                        ))
                        added_count += 1
            
            self.log_message(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {added_count}")
    
    def remove_selected_file(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selected = self.files_tree.selection()
        if selected:
            item = self.files_tree.item(selected[0])
            file_name = item['values'][0]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ Treeview
            self.files_tree.delete(selected[0])
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ BinderEngine
            self.binder_engine.files_to_bind = [
                f for f in self.binder_engine.files_to_bind 
                if f["name"] != file_name
            ]
            
            self.log_message(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_name}")
    
    def clear_binder_files(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        self.files_tree.delete(*self.files_tree.get_children())
        self.binder_engine.clear_files()
        self.log_message("üóëÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def browse_icon(self):
        """–í—ã–±—Ä–∞—Ç—å –∏–∫–æ–Ω–∫—É"""
        icon_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É (.ico)",
            filetypes=[("ICO —Ñ–∞–π–ª—ã", "*.ico")]
        )
        
        if icon_path:
            self.icon_path_var.set(icon_path)
            self.binder_engine.set_icon(icon_path)
            self.log_message(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: {Path(icon_path).name}")
    
    def bind_files(self):
        """–°–∫–ª–µ–∏—Ç—å —Ñ–∞–π–ª—ã"""
        if not self.binder_engine.files_to_bind:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–ª–µ–π–∫–∏!")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.binder_engine.set_execution_mode(self.execution_mode_var.get())
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫–ª–µ–µ–Ω–Ω—ã–π —Ñ–∞–π–ª",
            defaultextension=".exe",
            filetypes=[("EXE —Ñ–∞–π–ª—ã", "*.exe")]
        )
        
        if output_path:
            self.bind_files_btn.configure(state="disabled", text="–°–∫–ª–µ–∏–≤–∞—é...")
            self.status_bar.configure(text="–°–∫–ª–µ–∏–≤–∞—é —Ñ–∞–π–ª—ã...")
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=self._bind_files_thread, args=(output_path,))
            thread.daemon = True
            thread.start()
    
    def _bind_files_thread(self, output_path):
        """–ü–æ—Ç–æ–∫ —Å–∫–ª–µ–π–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            self.log_message("üîó –ù–∞—á–∏–Ω–∞—é —Å–∫–ª–µ–π–∫—É —Ñ–∞–π–ª–æ–≤...")
            
            result = self.binder_engine.bind_files(output_path)
            
            if result.get("success", False):
                self.log_message("‚úÖ –°–∫–ª–µ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                self.log_message(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {result.get('output_file', 'N/A')}")
                self.log_message(f"üìä –§–∞–π–ª–æ–≤ —Å–∫–ª–µ–µ–Ω–æ: {result.get('files_count', 0)}")
                self.log_message(f"üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {result.get('total_size', 0):,} –±–∞–π—Ç")
                self.log_message(f"‚öôÔ∏è –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('execution_mode', 'N/A')}")
                
                self.root.after(0, lambda: messagebox.showinfo(
                    "–£—Å–ø–µ—Ö",
                    f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–ª–µ–µ–Ω—ã!\n\n"
                    f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {result.get('output_file', 'N/A')}\n"
                    f"–§–∞–π–ª–æ–≤: {result.get('files_count', 0)}\n"
                    f"–†–∞–∑–º–µ—Ä: {result.get('total_size', 0):,} –±–∞–π—Ç\n"
                    f"–†–µ–∂–∏–º: {result.get('execution_mode', 'N/A')}"
                ))
            else:
                error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏: {error_msg}")
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏: {error_msg}"))
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏: {e}")
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏: {e}"))
        finally:
            self.root.after(0, self._finish_binding)
    
    def _finish_binding(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–ª–µ–π–∫–∏"""
        self.bind_files_btn.configure(state="normal", text="üîó –°–∫–ª–µ–∏—Ç—å —Ñ–∞–π–ª—ã")
        self.status_bar.configure(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def create_cryptor_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ—Ä–∞"""
        cryptor_frame = ctk.CTkFrame(self.main_container)
        cryptor_frame.pack(fill="x", padx=5, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        cryptor_title = ctk.CTkLabel(
            cryptor_frame,
            text="üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        cryptor_title.pack(anchor="w", padx=10, pady=(10, 5))
        
        # –ù–û–í–ê–Ø –ü–ê–ù–ï–õ–¨: –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–æ–≤ —Å—Ç–∞–±–∞
        self.create_stub_mode_panel(cryptor_frame)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        settings_container = ctk.CTkFrame(cryptor_frame)
        settings_container.pack(fill="x", padx=10, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        settings_container.grid_columnconfigure(0, weight=1)
        settings_container.grid_columnconfigure(1, weight=1)
        settings_container.grid_columnconfigure(2, weight=1)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        self.create_encryption_settings(settings_container, 0)
        
        # –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è
        self.create_obfuscation_settings(settings_container, 1)
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∞–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑
        self.create_anti_analysis_settings(settings_container, 2)
        
        # –ö–Ω–æ–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è
        self.crypt_button = ctk.CTkButton(
            cryptor_frame,
            text="üöÄ –ù–∞—á–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏–µ",
            command=self.start_crypting,
            height=40,
            fg_color="#00FF00",
            hover_color="#00CC00",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.crypt_button.pack(pady=10)
        
    def create_stub_mode_panel(self, parent):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ —Å—Ç–∞–±–∞"""
        stub_frame = ctk.CTkFrame(parent)
        stub_frame.pack(fill="x", padx=5, pady=2)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        stub_title = ctk.CTkLabel(
            stub_frame,
            text="üéØ –†–µ–∂–∏–º —Å—Ç–∞–±–∞ (–∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç):",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        stub_title.pack(anchor="w", padx=5, pady=(4, 2))

        # –†–µ–∂–∏–º—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        modes_row = ctk.CTkFrame(stub_frame)
        modes_row.pack(fill="x", padx=5, pady=2)

        # –ú–∞—Å—Å–∏–≤ —Ä–µ–∂–∏–º–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π
        stub_modes = [
            ("üü¢ DEFAULT", "–ú–∏–Ω–∏–º—É–º –∑–∞—â–∏—Ç—ã"),
            ("üü° STEALTH", "–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º, –∞–Ω—Ç–∏-–æ—Ç–ª–∞–¥–∫–∞"),
            ("üî¥ ULTRA", "AES+XOR, –∞–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑")
        ]
        for i, (icon, desc) in enumerate(stub_modes):
            mode_col = ctk.CTkFrame(modes_row)
            mode_col.grid(row=0, column=i, sticky="nsew", padx=2, pady=0)
            mode_label = ctk.CTkLabel(mode_col, text=icon, font=ctk.CTkFont(size=12, weight="bold"))
            mode_label.pack()
            mode_desc = ctk.CTkLabel(mode_col, text=desc, font=ctk.CTkFont(size=9), text_color="#888888")
            mode_desc.pack()
            modes_row.grid_columnconfigure(i, weight=1)

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        select_row = ctk.CTkFrame(stub_frame)
        select_row.pack(fill="x", padx=5, pady=2)
        mode_label = ctk.CTkLabel(select_row, text="–í—ã–±—Ä–∞—Ç—å:", font=ctk.CTkFont(size=11))
        mode_label.pack(side="left", padx=2)
        self.stub_mode_var = tk.StringVar(value="DEFAULT")
        mode_combo = ctk.CTkOptionMenu(
            select_row,
            variable=self.stub_mode_var,
            values=["DEFAULT", "STEALTH", "ULTRA"],
            width=110,
            command=self.on_stub_mode_changed
        )
        mode_combo.pack(side="left", padx=2)
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ
        self.stub_info_label = ctk.CTkLabel(
            select_row,
            text="–†–µ–∂–∏–º DEFAULT: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ XOR —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ",
            font=ctk.CTkFont(size=9),
            text_color="#00FF00"
        )
        self.stub_info_label.pack(side="left", padx=8)
        
    def on_stub_mode_changed(self, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å—Ç–∞–±–∞"""
        mode_info = {
            "DEFAULT": "–†–µ–∂–∏–º DEFAULT: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ XOR —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã",
            "STEALTH": "–†–µ–∂–∏–º STEALTH: –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–µ XOR + –ê–Ω—Ç–∏-–æ—Ç–ª–∞–¥–∫–∞ + –°–∫—Ä—ã—Ç–∏–µ –≤ –ø–∞–º—è—Ç–∏",
            "ULTRA": "–†–µ–∂–∏–º ULTRA: AES-256 + XOR + –ü–æ–ª–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è + –ê–Ω—Ç–∏-VM + –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑"
        }
        
        self.stub_info_label.configure(text=mode_info.get(value, ""))
        self.log_message(f"üéØ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Å—Ç–∞–±–∞: {value}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if value == "DEFAULT":
            self.encryption_var.set("XOR-Polymorphic")
            self.obfuscation_var.set("MINIMAL")
            self.string_encryption_var.set(False)
            self.import_obfuscation_var.set(False)
            self.junk_code_var.set(False)
            self.anti_debug_var.set(False)
            self.anti_vm_var.set(False)
            self.timing_analysis_var.set(False)
            self.polymorphic_var.set(False)
        elif value == "STEALTH":
            self.encryption_var.set("XOR-Polymorphic")
            self.obfuscation_var.set("HIGH")
            self.string_encryption_var.set(True)
            self.import_obfuscation_var.set(True)
            self.junk_code_var.set(True)
            self.anti_debug_var.set(True)
            self.anti_vm_var.set(False)
            self.timing_analysis_var.set(False)
            self.polymorphic_var.set(True)
        elif value == "ULTRA":
            self.encryption_var.set("AES-256-GCM")
            self.obfuscation_var.set("MAXIMUM")
            self.string_encryption_var.set(True)
            self.import_obfuscation_var.set(True)
            self.junk_code_var.set(True)
            self.anti_debug_var.set(True)
            self.anti_vm_var.set(True)
            self.timing_analysis_var.set(True)
            self.polymorphic_var.set(True)
        
    def create_encryption_settings(self, parent, column):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        encryption_frame = ctk.CTkFrame(parent)
        encryption_frame.grid(row=0, column=column, sticky="nsew", padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        encryption_frame.grid_columnconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        enc_title = ctk.CTkLabel(
            encryption_frame,
            text="üîê –ê–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        enc_title.grid(row=0, column=0, sticky="w", padx=5, pady=2)
        
        # –í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        self.encryption_var = tk.StringVar(value="XOR-Polymorphic")
        encryption_combo = ctk.CTkOptionMenu(
            encryption_frame,
            variable=self.encryption_var,
            values=["AES-256-GCM", "ChaCha20-Poly1305", "AES-256-CBC", "XOR-Polymorphic"],
            width=200
        )
        encryption_combo.grid(row=1, column=0, sticky="w", padx=5, pady=2)
        
    def create_obfuscation_settings(self, parent, column):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏"""
        obfuscation_frame = ctk.CTkFrame(parent)
        obfuscation_frame.grid(row=0, column=column, sticky="nsew", padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        obfuscation_frame.grid_columnconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        obf_title = ctk.CTkLabel(
            obfuscation_frame,
            text="üîÑ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏:",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        obf_title.grid(row=0, column=0, sticky="w", padx=5, pady=2)
        
        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
        self.obfuscation_var = tk.StringVar(value="MAXIMUM")
        obfuscation_combo = ctk.CTkOptionMenu(
            obfuscation_frame,
            variable=self.obfuscation_var,
            values=["MINIMAL", "MEDIUM", "HIGH", "MAXIMUM"],
            width=200
        )
        obfuscation_combo.grid(row=1, column=0, sticky="w", padx=5, pady=2)
        
        # –ß–µ–∫–±–æ–∫—Å—ã –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
        self.string_encryption_var = tk.BooleanVar(value=True)
        string_check = ctk.CTkCheckBox(
            obfuscation_frame,
            text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫",
            variable=self.string_encryption_var
        )
        string_check.grid(row=2, column=0, sticky="w", padx=5, pady=2)
        
        self.import_obfuscation_var = tk.BooleanVar(value=True)
        import_check = ctk.CTkCheckBox(
            obfuscation_frame,
            text="–û–±—Ñ—É—Å–∫–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤",
            variable=self.import_obfuscation_var
        )
        import_check.grid(row=3, column=0, sticky="w", padx=5, pady=2)
        
        self.junk_code_var = tk.BooleanVar(value=True)
        junk_check = ctk.CTkCheckBox(
            obfuscation_frame,
            text="–ò–Ω–∂–µ–∫—Ü–∏—è –º—É—Å–æ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞",
            variable=self.junk_code_var
        )
        junk_check.grid(row=4, column=0, sticky="w", padx=5, pady=2)
        
    def create_anti_analysis_settings(self, parent, column):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑–∞"""
        anti_frame = ctk.CTkFrame(parent)
        anti_frame.grid(row=0, column=column, sticky="nsew", padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        anti_frame.grid_columnconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        anti_title = ctk.CTkLabel(
            anti_frame,
            text="üõ°Ô∏è –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑:",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        anti_title.grid(row=0, column=0, sticky="w", padx=5, pady=2)
        
        # –ß–µ–∫–±–æ–∫—Å—ã –∞–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑–∞
        self.anti_debug_var = tk.BooleanVar(value=True)
        debug_check = ctk.CTkCheckBox(
            anti_frame,
            text="–î–µ—Ç–µ–∫—Ç –æ—Ç–ª–∞–¥—á–∏–∫–∞",
            variable=self.anti_debug_var
        )
        debug_check.grid(row=1, column=0, sticky="w", padx=5, pady=2)
        
        self.anti_vm_var = tk.BooleanVar(value=True)
        vm_check = ctk.CTkCheckBox(
            anti_frame,
            text="–î–µ—Ç–µ–∫—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã",
            variable=self.anti_vm_var
        )
        vm_check.grid(row=2, column=0, sticky="w", padx=5, pady=2)
        
        self.timing_analysis_var = tk.BooleanVar(value=True)
        timing_check = ctk.CTkCheckBox(
            anti_frame,
            text="Timing-–∞–Ω–∞–ª–∏–∑",
            variable=self.timing_analysis_var
        )
        timing_check.grid(row=3, column=0, sticky="w", padx=5, pady=2)
        
        self.polymorphic_var = tk.BooleanVar(value=True)
        poly_check = ctk.CTkCheckBox(
            anti_frame,
            text="–ü–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –∫–æ–¥",
            variable=self.polymorphic_var
        )
        poly_check.grid(row=4, column=0, sticky="w", padx=5, pady=2)
        
    def create_log_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ª–æ–≥–æ–≤"""
        log_frame = ctk.CTkFrame(self.main_container)
        log_frame.pack(fill="both", expand=True, padx=5, pady=5)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ expand=True
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        log_header = ctk.CTkFrame(log_frame)
        log_header.pack(fill="x", padx=5, pady=5)
        
        log_title = ctk.CTkLabel(
            log_header,
            text="üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        log_title.pack(side="left", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        clear_log_btn = ctk.CTkButton(
            log_header,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            command=self.clear_logs,
            width=100,
            height=30,
            fg_color="#FF4444",
            hover_color="#CC3333"
        )
        clear_log_btn.pack(side="right", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        save_log_btn = ctk.CTkButton(
            log_header,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=self.save_logs,
            width=100,
            height=30
        )
        save_log_btn.pack(side="right", padx=5, pady=5)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        log_container = ctk.CTkFrame(log_frame)
        log_container.pack(fill="both", expand=True, padx=5, pady=5)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ expand=True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        log_container.grid_rowconfigure(0, weight=1)
        log_container.grid_columnconfigure(0, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(
            log_container,
            height=15,  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å 8 –¥–æ 15
            wrap=tk.WORD,
            font=("Consolas", 10),  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å 9 –¥–æ 10
            bg="#1A1A1A",  # –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω
            fg="#00FF00",  # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
            insertbackground="#FFFFFF",
            selectbackground="#444444",  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
            selectforeground="#FFFFFF"
        )
        self.log_text.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.log_text.tag_configure("success", foreground="#00FF00")  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞
        self.log_text.tag_configure("error", foreground="#FF4444")    # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
        self.log_text.tag_configure("warning", foreground="#FFAA00")  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        self.log_text.tag_configure("info", foreground="#00AAFF")     # –°–∏–Ω–∏–π –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.log_text.tag_configure("debug", foreground="#888888")    # –°–µ—Ä—ã–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_message("üöÄ Cryptornor 2025 –∑–∞–ø—É—â–µ–Ω")
        self.log_message("üìù –õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å")
        self.log_message("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '–û—á–∏—Å—Ç–∏—Ç—å' –∏ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏")
        
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_bar = ctk.CTkLabel(
            self.main_container,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=ctk.CTkFont(size=10),
            text_color="#888888"
        )
        self.status_bar.pack(side="bottom", anchor="w", padx=10, pady=5)
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è ttk
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è notebook
        style.configure('TNotebook', background='#2B2B2B')
        style.configure('TNotebook.Tab', background='#3B3B3B', foreground='white')
        style.map('TNotebook.Tab', background=[('selected', '#4B4B4B')])
        
    def browse_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è",
            filetypes=[
                ("Executable files", "*.exe"),
                ("Dynamic libraries", "*.dll"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            self.file_path_var.set(file_path)
            self.current_file = file_path
            self.log_message(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_path}")
            
    def analyze_file(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.current_file:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!")
            return
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.analyze_button.configure(state="disabled", text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        self.status_bar.configure(text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...")
        
        thread = threading.Thread(target=self._analyze_file_thread)
        thread.daemon = True
        thread.start()
        
    def _analyze_file_thread(self):
        """–ü–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞"""
        try:
            self.log_message("–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞...")
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
            self.analysis_result = self.file_analyzer.analyze_file(self.current_file)
            
            if "error" in self.analysis_result:
                self.log_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {self.analysis_result['error']}")
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self._update_analysis_display)
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        finally:
            self.root.after(0, self._finish_analysis)
    
    def _update_analysis_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.analysis_result:
            return
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        general_info = self._format_general_info()
        self.general_text.delete(1.0, tk.END)
        self.general_text.insert(1.0, general_info)
        
        # PE –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        pe_info = self._format_pe_info()
        self.pe_text.delete(1.0, tk.END)
        self.pe_text.insert(1.0, pe_info)
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        deps_info = self._format_dependencies()
        self.deps_text.delete(1.0, tk.END)
        self.deps_text.insert(1.0, deps_info)
        
        # –°–µ–∫—Ü–∏–∏
        sections_info = self._format_sections()
        self.sections_text.delete(1.0, tk.END)
        self.sections_text.insert(1.0, sections_info)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        security_info = self._format_security()
        self.security_text.delete(1.0, tk.END)
        self.security_text.insert(1.0, security_info)
        
    def _format_general_info(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not self.analysis_result or "file_info" not in self.analysis_result:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        file_info = self.analysis_result["file_info"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_type = "Native"
        if self.analysis_result.get('is_dotnet', False):
            app_type = ".NET"
        
        info = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

{'='*60}
{'='*15} üü¢ {app_type} üü¢ {'='*15}
{'='*60}

üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {file_info.get('name', 'N/A')}
üìç –ü—É—Ç—å: {file_info.get('path', 'N/A')}
üìè –†–∞–∑–º–µ—Ä: {file_info.get('size', 0):,} –±–∞–π—Ç ({self._format_size(file_info.get('size', 0))})
üïí –°–æ–∑–¥–∞–Ω: {self._format_timestamp(file_info.get('created', 0))}
üïí –ò–∑–º–µ–Ω–µ–Ω: {self._format_timestamp(file_info.get('modified', 0))}
üïí –î–æ—Å—Ç—É–ø: {self._format_timestamp(file_info.get('accessed', 0))}

üîê –•–µ—à–∏:
   MD5:    {file_info.get('hash_md5', 'N/A')}
   SHA256: {file_info.get('hash_sha256', 'N/A')}

üìã –¢–∏–ø —Ñ–∞–π–ª–∞: {file_info.get('file_type', 'N/A')}
üéØ MIME —Ç–∏–ø: {file_info.get('mime_type', 'N/A')}
‚öôÔ∏è –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π: {'–î–∞' if file_info.get('is_executable', False) else '–ù–µ—Ç'}
üõ°Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π: {'–î–∞' if file_info.get('is_system_file', False) else '–ù–µ—Ç'}

üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {self.analysis_result.get('architecture', 'N/A')}
‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: {self.analysis_result.get('threat_level', 'UNKNOWN')}
"""
        
        return info
    
    def _format_pe_info(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PE –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not self.analysis_result or "pe_info" not in self.analysis_result:
            return "PE –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        pe_info = self.analysis_result["pe_info"]
        
        info = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                      PE –ò–ù–§–û–†–ú–ê–¶–ò–Ø                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üñ•Ô∏è –ú–∞—à–∏–Ω–∞: {pe_info.get('machine_name', 'N/A')} ({pe_info.get('machine', 'N/A')})
‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {pe_info.get('characteristics', 'N/A')}
üéØ –ü–æ–¥—Å–∏—Å—Ç–µ–º–∞: {pe_info.get('subsystem', 'N/A')}
üõ°Ô∏è DLL —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {pe_info.get('dll_characteristics', 'N/A')}

üìç –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å: {pe_info.get('image_base', 'N/A')}
üéØ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {pe_info.get('entry_point', 'N/A')}
üìè –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞: {pe_info.get('size_of_image', 0):,} –±–∞–π—Ç
üìè –†–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {pe_info.get('size_of_headers', 0):,} –±–∞–π—Ç
üîç –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: {pe_info.get('checksum', 'N/A')}
üïí –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {self._format_timestamp(pe_info.get('timestamp', 0))}

üìä –°–µ–∫—Ü–∏–∏: {pe_info.get('number_of_sections', 0)}
üîç –°–∏–º–≤–æ–ª—ã: {pe_info.get('number_of_symbols', 0)}

üìã –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:
   DLL: {'–î–∞' if pe_info.get('is_dll', False) else '–ù–µ—Ç'}
   EXE: {'–î–∞' if pe_info.get('is_exe', False) else '–ù–µ—Ç'}
   Driver: {'–î–∞' if pe_info.get('is_driver', False) else '–ù–µ—Ç'}

üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
   –†–µ–ª–æ–∫–∞—Ü–∏–∏: {'–î–∞' if pe_info.get('has_relocations', False) else '–ù–µ—Ç'}
   –û—Ç–ª–∞–¥–∫–∞: {'–î–∞' if pe_info.get('has_debug', False) else '–ù–µ—Ç'}
   TLS: {'–î–∞' if pe_info.get('has_tls', False) else '–ù–µ—Ç'}
   –†–µ—Å—É—Ä—Å—ã: {'–î–∞' if pe_info.get('has_resources', False) else '–ù–µ—Ç'}
   –≠–∫—Å–ø–æ—Ä—Ç—ã: {'–î–∞' if pe_info.get('has_exports', False) else '–ù–µ—Ç'}
   –ò–º–ø–æ—Ä—Ç—ã: {'–î–∞' if pe_info.get('has_imports', False) else '–ù–µ—Ç'}
"""
        
        return info
    
    def _format_dependencies(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if not self.analysis_result or "dependencies" not in self.analysis_result:
            return "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        deps = self.analysis_result["dependencies"]
        
        info = "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        info += "‚ïë                      –ó–ê–í–ò–°–ò–ú–û–°–¢–ò                            ‚ïë\n"
        info += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        
        if not deps:
            info += "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        else:
            for i, dep in enumerate(deps, 1):
                if "error" in dep:
                    info += f"‚ùå –û—à–∏–±–∫–∞: {dep['error']}\n"
                    continue
                
                info += f"üì¶ {i}. {dep.get('dll_name', 'N/A')}\n"
                functions = dep.get('functions', [])
                if functions:
                    for func in functions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ—É–Ω–∫—Ü–∏–π
                        info += f"   ‚îî‚îÄ {func.get('name', 'N/A')} @ {func.get('address', 'N/A')}\n"
                    if len(functions) > 10:
                        info += f"   ‚îî‚îÄ ... –∏ –µ—â–µ {len(functions) - 10} —Ñ—É–Ω–∫—Ü–∏–π\n"
                info += "\n"
        
        return info
    
    def _format_sections(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π"""
        if not self.analysis_result or "sections" not in self.analysis_result:
            return "–°–µ–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        sections = self.analysis_result["sections"]
        
        info = "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        info += "‚ïë                        –°–ï–ö–¶–ò–ò                               ‚ïë\n"
        info += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        
        if not sections:
            info += "–°–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        else:
            for i, section in enumerate(sections, 1):
                if "error" in section:
                    info += f"‚ùå –û—à–∏–±–∫–∞: {section['error']}\n"
                    continue
                
                info += f"üìÑ {i}. {section.get('name', 'N/A')}\n"
                info += f"   üìç –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {section.get('virtual_address', 'N/A')}\n"
                info += f"   üìè –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {section.get('virtual_size', 0):,} –±–∞–π—Ç\n"
                info += f"   üìç Raw –∞–¥—Ä–µ—Å: {section.get('raw_address', 'N/A')}\n"
                info += f"   üìè Raw —Ä–∞–∑–º–µ—Ä: {section.get('raw_size', 0):,} –±–∞–π—Ç\n"
                info += f"   üîß –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {section.get('characteristics', 'N/A')}\n"
                entropy_value = section.get('entropy', 0)
                if isinstance(entropy_value, (int, float)):
                    info += f"   üìä –≠–Ω—Ç—Ä–æ–ø–∏—è: {entropy_value:.2f}\n"
                else:
                    info += f"   üìä –≠–Ω—Ç—Ä–æ–ø–∏—è: {entropy_value}\n"
                info += f"   ‚öôÔ∏è –ò—Å–ø–æ–ª–Ω—è–µ–º–∞—è: {'–î–∞' if section.get('is_executable', False) else '–ù–µ—Ç'}\n"
                info += f"   üìñ –ß–∏—Ç–∞–µ–º–∞—è: {'–î–∞' if section.get('is_readable', False) else '–ù–µ—Ç'}\n"
                info += f"   ‚úèÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º–∞—è: {'–î–∞' if section.get('is_writable', False) else '–ù–µ—Ç'}\n\n"
        
        return info
    
    def _format_security(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if not self.analysis_result or "security" not in self.analysis_result:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        security = self.analysis_result["security"]
        entropy = self.analysis_result.get("entropy", {})
        
        info = "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        info += "‚ïë                      –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨                           ‚ïë\n"
        info += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        
        info += "üîê –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å: {'–î–∞' if security.get('has_signature', False) else '–ù–µ—Ç'}\n"
        info += "üõ°Ô∏è ASLR: {'–í–∫–ª—é—á–µ–Ω' if security.get('aslr_enabled', False) else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
        info += "üõ°Ô∏è DEP: {'–í–∫–ª—é—á–µ–Ω' if security.get('dep_enabled', False) else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
        info += "üõ°Ô∏è CFG: {'–í–∫–ª—é—á–µ–Ω' if security.get('cfg_enabled', False) else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
        info += "üõ°Ô∏è High Entropy VA: {'–î–∞' if security.get('high_entropy_va', False) else '–ù–µ—Ç'}\n\n"
        
        info += "üìä –≠–ù–¢–†–û–ü–ò–Ø:\n"
        if entropy:
            overall_entropy = entropy.get("overall", 0)
            if isinstance(overall_entropy, (int, float)):
                info += f"   –û–±—â–∞—è: {overall_entropy:.2f}\n"
            else:
                info += f"   –û–±—â–∞—è: {overall_entropy}\n"
            
            for section_name, section_entropy in entropy.items():
                if section_name != "overall":
                    if isinstance(section_entropy, (int, float)):
                        info += f"   {section_name}: {section_entropy:.2f}\n"
                    else:
                        info += f"   {section_name}: {section_entropy}\n"
        else:
            info += "   –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        
        return info
    
    def _finish_analysis(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        self.analyze_button.configure(state="normal", text="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.analysis_result:
            app_type = "Native"
            if self.analysis_result.get('is_dotnet', False):
                app_type = ".NET"
            self.status_bar.configure(text=f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω | –¢–∏–ø: {app_type}")
        else:
            self.status_bar.configure(text="–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ª–æ–≥
        if self.analysis_result:
            app_type = "Native"
            if self.analysis_result.get('is_dotnet', False):
                app_type = ".NET"
            self.log_message(f"üéØ –¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {app_type}")
            if self.analysis_result.get('is_dotnet', False):
                self.log_message("‚úÖ .NET –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –í–∫–ª—é—á–µ–Ω–∞")
            else:
                self.log_message("‚úÖ Native –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –í–∫–ª—é—á–µ–Ω–∞")
        self.log_message("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

    def start_crypting(self):
        """–ù–∞—á–∞–ª–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è"""
        if not self.current_file:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!")
            return

        if not self.analysis_result:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª!")
            return

        # –°–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        options = self._collect_options()

        # –ó–∞–ø—É—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.crypt_button.configure(state="disabled", text="–ö—Ä–∏–ø—Ç—É—é...")
        self.status_bar.configure(text="–ö—Ä–∏–ø—Ç—É—é —Ñ–∞–π–ª...")

        thread = threading.Thread(target=self._crypt_file_thread, args=(options,))
        thread.daemon = True
        thread.start()
        
    def _crypt_file_thread(self, options: Dict):
        """–ü–æ—Ç–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        try:
            self.log_message("–ù–∞—á–∏–Ω–∞—é –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            self.log_message(f"üéØ –†–µ–∂–∏–º —Å—Ç–∞–±–∞: {options.get('stub_mode', 'DEFAULT')}")
            self.log_message(f"–ê–ª–≥–æ—Ä–∏—Ç–º: {options.get('encryption_algorithm', 'AES-256-GCM')}")
            self.log_message(f"–û–±—Ñ—É—Å–∫–∞—Ü–∏—è: {options.get('obfuscation_level', 'MAXIMUM')}")

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.log_message(f"üîß –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {options}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é encrypt_and_build –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
            result = self.cryptor_engine.encrypt_and_build(self.current_file, options)

            if result.get("success", False):
                self.log_message("‚úÖ –ö—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                self.log_message(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {result.get('output_file', 'N/A')}")
                self.log_message(f"üìè –†–∞–∑–º–µ—Ä: {result.get('payload_size', 0):,} –±–∞–π—Ç")
                self.log_message(f"üîë AES-–∫–ª—é—á: {result.get('aes_key', 'N/A')}")
                self.log_message(f"üõ†Ô∏è Loader: {result.get('loader_exe', 'N/A')}")
                self.log_message(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {result.get('arch', 'N/A')}, .NET: {result.get('is_dotnet', False)}")
                self.root.after(0, lambda: messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", 
                    f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!\n\n"
                    f"–†–µ–∂–∏–º: {options.get('stub_mode', 'DEFAULT')}\n"
                    f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {result.get('output_file', 'N/A')}\n"
                    f"–†–∞–∑–º–µ—Ä: {result.get('payload_size', 0):,} –±–∞–π—Ç\n"
                    f"AES-–∫–ª—é—á: {result.get('aes_key', 'N/A')}\n"
                    f"Loader: {result.get('loader_exe', 'N/A')}\n"
                    f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {result.get('arch', 'N/A')}, .NET: {result.get('is_dotnet', False)}"
                ))
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è: {e}")
        finally:
            self.root.after(0, self._finish_crypting)
    
    def _collect_options(self) -> Dict:
        """–°–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ—Ä–∞"""
        return {
            "stub_mode": self.stub_mode_var.get(),
            "encryption_algorithm": self.encryption_var.get(),
            "obfuscation_level": self.obfuscation_var.get(),
            "string_encryption": self.string_encryption_var.get(),
            "import_obfuscation": self.import_obfuscation_var.get(),
            "junk_code_injection": self.junk_code_var.get(),
            "anti_debug": self.anti_debug_var.get(),
            "anti_vm": self.anti_vm_var.get(),
            "timing_analysis": self.timing_analysis_var.get(),
            "polymorphic": self.polymorphic_var.get(),
            "anti_analysis": True
        }
    
    def _finish_crypting(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏—è"""
        self.crypt_button.configure(state="normal", text="üöÄ –ù–∞—á–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–Ω–∏–µ")
        self.status_bar.configure(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    def log_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
        timestamp = time.strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç
        if "‚úÖ" in message or "—É—Å–ø–µ—à–Ω–æ" in message.lower():
            tag = "success"
        elif "‚ùå" in message or "–æ—à–∏–±–∫–∞" in message.lower() or "error" in message.lower():
            tag = "error"
        elif "‚ö†Ô∏è" in message or "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" in message.lower() or "warning" in message.lower():
            tag = "warning"
        elif "[DEBUG]" in message:
            tag = "debug"
        elif "üîß" in message or "üéØ" in message or "üìä" in message:
            tag = "info"
        else:
            tag = "success"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º
        self.log_text.insert(tk.END, log_entry, tag)
        self.log_text.see(tk.END)
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_text.delete(1.0, tk.END)
        self.log_message("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            from tkinter import filedialog
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏",
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            
            if file_path:
                logs_content = self.log_text.get(1.0, tk.END)
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(logs_content)
                self.log_message(f"üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {file_path}")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1
        
        return f"{size_bytes:.1f} {size_names[i]}"
    
    def _format_timestamp(self, timestamp: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏"""
        try:
            if timestamp > 0:
                dt = datetime.fromtimestamp(timestamp)
                return dt.strftime("%Y-%m-%d %H:%M:%S")
            else:
                return "N/A"
        except:
            return "N/A"
    
    def show_binder_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Binder"""
        messagebox.showinfo(
            "üìé File Binder", 
            "–§—É–Ω–∫—Ü–∏—è —Å–∫–ª–µ–π–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –°–∫–ª–µ–π–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n"
            "‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º—ã\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É 'üìé Binder' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
        ) 